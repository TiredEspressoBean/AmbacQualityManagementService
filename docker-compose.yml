services:
  postgres:
    image: ankane/pgvector:v0.5.1
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-tracker_AMBAC}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-tracker_AMBAC}"]
      interval: 30s
      timeout: 10s
      retries: 5

  backend:
    build:
      context: ./PartsTracker
      dockerfile: Dockerfile
    restart: unless-stopped
    command: >
      sh -c "
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py create_temp_admin &&
      python manage.py tailwind install &&
      python manage.py tailwind build &&
      python manage.py crontab add &&
      service cron start &&
      python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    environment:
      - POSTGRES_HOST=postgres
      - NPM_BIN_PATH=/usr/bin/npm
    volumes:
      - ./PartsTracker:/app
    depends_on:
      postgres:
        condition: service_healthy

  # Build frontend static files
  frontend-builder:
    build:
      context: ./ambac-tracker-ui
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      # Frontend will make API calls to the same domain (handled by Caddy proxy)
      - VITE_API_TARGET=https://govtracker.ambac.local
    volumes:
      - frontend-dist:/app/dist
    command: ["npm", "run", "build"]

#   Caddy reverse proxy and static file server (DISABLED FOR LOCAL DEV)
  caddy:
     image: caddy:2-alpine
     restart: unless-stopped
     ports:
       - "80:80"
       - "443:443"
     extra_hosts:
       - "host.docker.internal:host-gateway"
     volumes:
       - ./conf:/etc/caddy
       - ./certs:/etc/caddy/certs:ro
       - frontend-dist:/usr/share/caddy
       - caddy_data:/data
       - caddy_config:/config
     depends_on:
       - backend
       - frontend-builder

  # Simple nginx for local dev (no SSL/certs needed)
#  nginx-local:
#    image: nginx:alpine
#    restart: unless-stopped
#    ports:
#      - "8080:80"
#    volumes:
#      - frontend-dist:/usr/share/nginx/html
#      - ./nginx-local.conf:/etc/nginx/conf.d/default.conf
#    depends_on:
#      - backend
#      - frontend-builder

networks:
  default:
    name: ambactracker-network
    external: true

volumes:
  postgres_data:
  frontend-dist:
  caddy_data:
  caddy_config: