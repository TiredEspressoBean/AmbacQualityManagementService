# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure App Service: https://aka.ms/python-webapps-actions

name: Build and deploy Python app to Azure Web App - Parts-tracker-django

on:
  push:
    branches:
      - master
    paths:
      - 'PartsTracker/**'  # Only trigger when PartsTracker changes
      - '.github/workflows/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python version
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Set up Node.js for Tailwind CSS build
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Python dependencies and build Tailwind CSS
        run: |
          cd PartsTracker
          pip install -r requirements.txt
          export NPM_BIN_PATH=$(which npm)
          python manage.py tailwind install
          python manage.py tailwind build
          python manage.py collectstatic --noinput

      # Optional: Add step to run tests here (PyTest, Django test suites, etc.)

      - name: Upload artifact for deployment jobs
        uses: actions/upload-artifact@v4
        with:
          name: python-app
          path: PartsTracker/

  deploy:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      id-token: write #This is required for requesting the JWT
      contents: read #This is required for actions/checkout

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: python-app
          # Downloads to current directory

      - name: Show directory structure before deployment
        run: |
          echo "=== Current directory contents ==="
          ls -la
          echo ""
          echo "=== Checking if python-app directory exists ==="
          if [ -d "python-app" ]; then
            echo "Found python-app directory"
            ls -la python-app/
            echo ""
            echo "=== Checking for key Python files ==="
            ls -la python-app/requirements.txt python-app/manage.py python-app/runtime.txt 2>/dev/null || echo "WARNING: Some key files missing!"
            echo ""
            echo "=== First 50 files in python-app ==="
            find python-app -type f | head -50
          else
            echo "ERROR: python-app directory not found!"
            echo "Available directories:"
            ls -la
          fi

      - name: Create test ZIP to verify structure
        run: |
          echo "=== Creating test ZIP to verify what will be deployed ==="
          cd .
          zip -r test-structure.zip . -x '*.git*'
          echo ""
          echo "=== First 30 files in ZIP ==="
          unzip -l test-structure.zip | head -30
          echo ""
          echo "=== Looking for key Python files in ZIP ==="
          unzip -l test-structure.zip | grep -E "(requirements.txt|manage.py|runtime.txt)" || echo "ERROR: Key files not found in ZIP!"

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_3571F1C3A42A49D3872969648F385161 }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_D0F5033F7FA442309649C563C02819E1 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_6B16089ABB6140E59B61D4BD52C77673 }}

      - name: 'Create deployment package for all apps'
        run: |
          echo "Creating deployment ZIP..."
          zip -r deploy.zip . -x '*.git*' 'test-structure.zip'
          ls -lh deploy.zip
          echo "Contents of ZIP (first 30 files):"
          unzip -l deploy.zip | head -30

      - name: 'Deploy to Backend (Django Web)'
        run: |
          echo "Deploying to Parts-tracker-django..."
          az webapp deploy \
            --resource-group PartsTracker \
            --name Parts-tracker-django \
            --src-path deploy.zip \
            --type zip \
            --async false
          echo "Backend deployment completed"

      - name: 'Ensure startup command is preserved'
        run: |
          echo "Verifying startup command after deployment..."
          az webapp config set \
            --resource-group PartsTracker \
            --name Parts-tracker-django \
            --startup-file "gunicorn --bind=0.0.0.0 --timeout 600 PartsTrackerApp.wsgi"

          echo "Restarting app to apply configuration..."
          az webapp restart --resource-group PartsTracker --name Parts-tracker-django

      - name: 'Deploy to Celery Worker (background)'
        run: |
          echo "Deploying to ambactracker-celery-worker..."
          az webapp deploy \
            --resource-group PartsTracker \
            --name ambactracker-celery-worker \
            --src-path deploy.zip \
            --type zip \
            --async true &
          echo "Celery Worker deployment started in background"

      - name: 'Deploy to Celery Beat (background)'
        run: |
          echo "Deploying to ambactracker-celery-beat..."
          az webapp deploy \
            --resource-group PartsTracker \
            --name ambactracker-celery-beat \
            --src-path deploy.zip \
            --type zip \
            --async true &
          echo "Celery Beat deployment started in background"

      - name: 'Wait for background deployments'
        run: |
          echo "Waiting a moment for deployments to upload..."
          sleep 30
          echo "Deployments are processing in Azure. Check Azure Portal for status."
