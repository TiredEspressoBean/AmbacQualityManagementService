"""
Django settings for PartsTracker project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv, dotenv_values

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Load .env file from project root
load_dotenv(dotenv_path=BASE_DIR / '.env')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "dev-secret-key-CHANGE-ME")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DJANGO_DEBUG', 'True').lower() in ('true', '1', 'yes')

# Custom test runner for vector extension support
TEST_RUNNER = 'Tracker.tests.VectorAwareTestRunner'


# Parse ALLOWED_HOSTS from environment variable (comma-separated)
ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost,127.0.0.1,.azurewebsites.net, 169.254.131.2').split(',')
# Application definition

if os.getenv("WEBSITE_HOSTNAME"):
    ALLOWED_HOSTS.append(os.getenv("WEBSITE_HOSTNAME"))

ALLOWED_HOSTS.append("169.254.131.2")




INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.admindocs',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.microsoft",
    'Tracker.apps.TrackerConfig',
    "tailwind",
    "theme",
    "django_browser_reload",
    "formtools",
    'auditlog',
    'widget_tweaks',
    "rest_framework",
    "rest_framework.authtoken",
    "dj_rest_auth",
    "dj_rest_auth.registration",
    "corsheaders",
    "drf_spectacular",
    "django_celery_beat",
    "django_celery_results",
]



MIDDLEWARE = [
    'auditlog.middleware.AuditlogMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # Add WhiteNoise right after SecurityMiddleware
    "corsheaders.middleware.CorsMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    "django.middleware.csrf.CsrfViewMiddleware",
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    "django_browser_reload.middleware.BrowserReloadMiddleware",
]

ROOT_URLCONF = 'PartsTrackerApp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'PartsTrackerApp.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('POSTGRES_DB', 'tracker_ambac'),
        'USER': os.environ.get('POSTGRES_USER'),
        'PASSWORD': os.environ.get('POSTGRES_PASSWORD'),
        'HOST': os.environ.get('POSTGRES_HOST', 'localhost'),
        'PORT': os.environ.get('POSTGRES_PORT', '5432'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#### Non boilerplate starts here ####

AUTHENTICATION_BACKENDS = (
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
)

AUTH_USER_MODEL = 'Tracker.User'

STATICFILES_DIRS = (
    BASE_DIR / 'Tracker/static',
    BASE_DIR / 'theme/static',
)

SITE_ID = 1

SOCIALACCOUNT_PROVIDERS = {
    "microsoft": {
        "APP": {
            "client_id": "YOUR_CLIENT_ID",
            "secret": "YOUR_CLIENT_SECRET",
            "key": "",
        },
        "SCOPE": ["email", "profile"],
        "AUTH_PARAMS": {"response_type": "code"},
    }
}

ACCOUNT_LOGIN_METHODS = ["email"]
ACCOUNT_SIGNUP_FIELDS = ["email*", "password1*", "password2*"]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.SessionAuthentication",  # for browser session login
        "rest_framework.authentication.TokenAuthentication",  # for API tokens
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",  # default gate
        'rest_framework.permissions.DjangoModelPermissions',
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 25,
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend',
                                'rest_framework.filters.OrderingFilter', ],
}

SPECTACULAR_SETTINGS = {
    # —————————————————————————————————————————————————————————————————————————————————
    # Basic API metadata (shows up in the generated Swagger/OpenAPI UI)
    # —————————————————————————————————————————————————————————————————————————————————
    "TITLE":        "My Project API",
    "DESCRIPTION":  "REST endpoints for our tracker system",
    "VERSION":      "1.0.0",

    "SKIP_READ_ONLY_FIELDS": True,
    "SKIP_WRITE_ONLY_FIELDS": True,
    "COMPONENT_SPLIT_REQUEST": True,
    "ENUM_NAME_OVERRIDES": {
        # "Tracker.models.Orders.order_status": "OrderStatusEnum",
        # "Tracker.models.Parts.part_status": "PartStatusEnum",
        # "Tracker.models.WorkOrder.workorder_status": "WorkOrderStatusEnum",
    },
}
CORS_ALLOWED_ORIGINS = os.getenv("CORS_ALLOWED_ORIGINS", "http://localhost:5173").split(",")
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "http://localhost:5173").split(",")
CORS_ALLOW_CREDENTIALS = os.getenv("CORS_ALLOW_CREDENTIALS", "false").lower() == "true"

LOGIN_REDIRECT_URL = '/tracker'

LOGOUT_REDIRECT_URL = '/tracker'

HUBSPOT_API_KEY = os.environ.get("HUBSPOT_API_KEY")

HUBSPOT_SYNC_ORDER_NAMES = ["Test Order Sync", "Production Alpha"]

TAILWIND_APP_NAME = 'theme'

INTERNAL_IPS = [
    "127.0.0.1",
]

X_FRAME_OPTIONS = 'SAMEORIGIN'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

NPM_BIN_PATH = os.environ.get("NPM_BIN_PATH")

AUDITLOG_INCLUDE_ALL_MODELS = True

HUBSPOT_DEBUG = True

if DEBUG:
    PASSWORD_RESET_DOMAIN = 'localhost:5173'
    PASSWORD_RESET_PROTOCOL = 'http'
else:
    PASSWORD_RESET_DOMAIN = os.environ.get("FRONTEND_URL", "")
    PASSWORD_RESET_PROTOCOL = 'https'

REST_AUTH = {
    'PASSWORD_RESET_SERIALIZER': 'Tracker.serializer.PasswordResetSerializer',
    'PASSWORD_RESET_CONFIRM_URL': 'http://localhost:5173/reset-password/{uid}/{token}/',
    'PASSWORD_RESET_USE_SITES_DOMAIN': False,
    'USE_JWT': False,
    'TOKEN_MODEL': 'rest_framework.authtoken.models.Token',
    'TOKEN_CREATOR': 'dj_rest_auth.utils.default_create_token',
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = os.environ.get("EMAIL_HOST")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_HOST_PASSWORD")
DEFAULT_FROM_EMAIL = os.environ.get("DEFAULT_FROM_EMAIL")

# --- AI / RAG minimal settings ---
AI_EMBED_ENABLED = os.getenv("AI_EMBED_ENABLED", "true").lower() in {"1", "true", "yes"}

# Ollama configuration
OLLAMA_URL = os.getenv("OLLAMA_URL", "http://localhost:11434")
OLLAMA_EMBED_MODEL = os.getenv("OLLAMA_EMBED_MODEL", "nomic-embed-text")
AI_EMBED_DIM = int(os.getenv("AI_EMBED_DIM", "768"))  # nomic-embed-text uses 768 dimensions

# Inline embedding guards
AI_EMBED_MAX_FILE_BYTES = int(os.getenv("AI_EMBED_MAX_FILE_BYTES", "2000000"))  # ~2MB
AI_EMBED_CHUNK_CHARS    = int(os.getenv("AI_EMBED_CHUNK_CHARS", "1200"))
AI_EMBED_MAX_CHUNKS     = int(os.getenv("AI_EMBED_MAX_CHUNKS", "40"))
AI_EMBED_BATCH_SIZE     = int(os.getenv("AI_EMBED_BATCH_SIZE", "8"))

# --- Redis Caching ---

CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.redis.RedisCache',
        'LOCATION': os.getenv("REDIS_CACHE_URL", "redis://localhost:6379/1"),
        'OPTIONS': {
            'db': '1',  # Use database 1 for cache (0 is for Celery)
            'parser_class': 'redis.connection.PythonParser',
            'pool_class': 'redis.BlockingConnectionPool',
        },
        'KEY_PREFIX': 'ambactracker',
        'TIMEOUT': 300,  # 5 minutes default
    }
}

# Session storage (optional: use Redis for sessions instead of DB)
# Uncomment the lines below to use Redis for session storage
# SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
# SESSION_CACHE_ALIAS = 'default'

# --- Celery ---

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL", "redis://localhost:6379/0")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND", "django-db")

CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_TIME_LIMIT = 30*60
CELERY_TASK_SOFT_TIME_LIMIT = 20*60
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TIMEZONE = 'America/New_York'

# Celery Beat (scheduled tasks)
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

# Celery Beat Schedule (default schedule, can be overridden in Django admin)
from celery.schedules import crontab

CELERY_BEAT_SCHEDULE = {
    'send-weekly-customer-emails': {
        'task': 'Tracker.tasks.send_weekly_emails_to_all_customers',
        'schedule': crontab(day_of_week='tuesday', hour=15, minute=0),  # Tuesday at 3:00 PM
        'options': {
            'expires': 3600,  # Task expires after 1 hour if not picked up
        }
    },
    # New unified notification system
    'dispatch-pending-notifications': {
        'task': 'Tracker.tasks.dispatch_pending_notifications',
        'schedule': crontab(minute='*/5'),  # Every 5 minutes
        'options': {
            'expires': 240,  # Task expires after 4 minutes if not picked up
        }
    },
    # HubSpot sync
    'sync-hubspot-deals-hourly': {
        'task': 'Tracker.tasks.sync_hubspot_deals_task',
        'schedule': crontab(minute=0),  # Every hour at :00
        'options': {
            'expires': 1800,  # Task expires after 30 minutes if not picked up
        }
    },
}